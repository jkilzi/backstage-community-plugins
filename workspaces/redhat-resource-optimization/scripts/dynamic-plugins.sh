#!/bin/bash

set -eu

script_path=$(realpath "${BASH_SOURCE:-$0}")
script_dir_path=$(dirname $script_path)
workspace_dir=$(dirname $script_dir_path)

cmt_flag=$(([[ $(command -v docker) ]] && echo -n "--use-docker") || true)

REGISTRY_URL="${REGISTRY_URL:-quay.io}"
ORG_ID="${ORG_ID:-redhat-resource-optimization}"
REPO="${REPO:-dynamic-plugins}"
VERSION="${VERSION:-}"

function _usage {
  cat <<EOF
Usage: ${BASH_SOURCE:-$0} [cleanup|pack]
       (export VERSION=1.0.0; ${BASH_SOURCE:-$0} [build|publish])

Environment variables:
  REGISTRY_URL    Default: "quay.io"
  ORG_ID          Default: "redhat-resource-optimization"
  REPO            Default: "dynamic-plugins"
  VERSION         Mandatory for building or publishing the container image. 

Sub-commands:
  clean      Removes directories generated by this script.
  pack       Generates the dynamic plugins and exports them to $workspace_dir/dynamic-plugins-root.
  build      Generates a container image including only the files generated by the "pack" subcommand.  
  publish    Builds and pushes the container image to a repository specified by the environment variables
EOF
}



# Executes the container management tool
function _cmt {
  eval "$((command -v podman) || (command -v docker)) $@"
}

function _tsc {
  echo "Running tsc, please wait..."
  yarn tsc
}

function _januscli_dynamic_plugins {
  yarn janus-cli package package-dynamic-plugins "$@"
}

function _get_commit_sha {
  git rev-parse --short=6 HEAD
}


function clean {
  rm -rf $workspace_dir/dist-types $workspace_dir/plugins/*/dist-dynamic || true
}

function pack {
  _tsc
  _januscli_dynamic_plugins $cmt_flag --export-to $workspace_dir/dynamic-plugins-root
}

function build {
  if [[ -z "$VERSION" ]]; then
    echo "Error: The VERSION environment variable must be provided" 
    exit 1
  fi

  if [[ ! ($VERSION =~ ^[0-9]\.[0-9]\.[0-9]) ]]; then
    echo "Error: The VERSION environment variable value doesn't match: /^[0-9]\.[0-9]\.[0-9]/" 
    exit 2
  fi

  _tsc
  _januscli_dynamic_plugins $cmt_flag --tag $REGISTRY_URL/$ORG_ID/$REPO:$VERSION
}

function publish {
  build
  commit_sha=$(_get_commit_sha)
  _cmt image tag $REGISTRY_URL/$ORG_ID/$REPO:$VERSION $REGISTRY_URL/$ORG_ID/$REPO:$VERSION+$commit_sha
  _cmt image tag $REGISTRY_URL/$ORG_ID/$REPO:$VERSION $REGISTRY_URL/$ORG_ID/$REPO:latest
  _cmt push $REGISTRY_URL/$ORG_ID/$REPO:$VERSION
  _cmt push $REGISTRY_URL/$ORG_ID/$REPO:$VERSION+$commit_sha
  _cmt push $REGISTRY_URL/$ORG_ID/$REPO:latest
}

if [[ $# -eq 0 || $1 =~ -h|--help ]]; then
  _usage
else
  "${@:1:1}"
fi
